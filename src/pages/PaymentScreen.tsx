import { useState, useEffect, CSSProperties } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'

// Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎî© Ìï®Ïàò
const preloadImage = (src: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const img = new Image()
    img.onload = () => resolve()
    img.onerror = () => reject(new Error(`Failed to load image: ${src}`))
    img.src = src
  })
}

// Î™®Îì† Ïù¥ÎØ∏ÏßÄÎ•º ÎØ∏Î¶¨ Î°úÎìúÌïòÎäî Ìï®Ïàò
const preloadAllImages = async () => {
  const images = [
    './payment.png',
    './qrscreen.png',
    './frames/frame1.jpg',
    './frames/frame2.jpg',
    './frames/frame3.jpg',
    './frames/frame4.jpg',
    './frames/frame5.jpg',
    './frames/frame6.jpg',
    './completed_frames/frame1_complete.jpg',
    './completed_frames/frame2_complete.jpg',
    './completed_frames/frame3_complete.jpg',
    './completed_frames/frame4_complete.jpg',
    './completed_frames/frame5_complete.jpg',
    './completed_frames/frame6_complete.jpg',
  ]

  try {
    await Promise.all(images.map(src => preloadImage(src)))
    console.log('‚úÖ Î™®Îì† Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎî© ÏôÑÎ£å')
  } catch (error) {
    console.warn('‚ö†Ô∏è ÏùºÎ∂Ä Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎî© Ïã§Ìå®:', error)
  }
}

// Window Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î•º Î™ÖÏãúÏ†ÅÏúºÎ°ú ÌôïÏû•
declare global {
  interface Window {
    electronAPI?: {
      closeApp?: () => void;
      sendPaymentRequest?: (data: any) => Promise<any>;
      showMessageBox?: (options: {
        type: 'error' | 'warning' | 'info' | 'question';
        title: string;
        message: string;
        buttons: string[];
      }) => Promise<any>;
    };
    imagesPreloaded?: boolean;
  }
}

const PaymentScreen = () => {
  const navigate = useNavigate()
  const location = useLocation()

  type PaymentStatus = 'preparing' | 'processing' | 'success' | 'failed'
  const [paymentStatus, setPaymentStatus] = useState<PaymentStatus>('preparing')
  const [errorMessage, setErrorMessage] = useState<string | null>(null)
  const [isNavigating, setIsNavigating] = useState(false)
  const [imagesReady, setImagesReady] = useState(false)

  const FIXED_AMOUNT = 5000 // Í≥†Ï†ï Í∏àÏï°

  useEffect(() => {
    // Ï†ÑÎã¨Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    if (!location.state?.uploadedImage) {
      console.error('‚ùå Í≤∞Ï†ú ÌôîÎ©¥: ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.')
      navigate('/upload')
    }

    // Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎî© (Ï†ÑÏó≠ÏóêÏÑú Ìïú Î≤àÎßå Ïã§Ìñâ)
    const initializeImages = async () => {
      if (!window.imagesPreloaded) {
        console.log('üñºÔ∏è Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎî© ÏãúÏûë...')
        await preloadAllImages()
        window.imagesPreloaded = true
      }
      setImagesReady(true) // ÌîÑÎ¶¨Î°úÎî© ÏôÑÎ£åÎêòÎ©¥ Ï¶âÏãú ÌëúÏãú
    }

    initializeImages()
  }, [location.state, navigate])

  // Ïù¥ÎØ∏ÏßÄ Î°úÎî© ÏôÑÎ£å ÌõÑ Î∞îÎ°ú Í≤∞Ï†ú ÏãúÏûë
  useEffect(() => {
    if (!imagesReady) return

    // ÏïΩÍ∞ÑÏùò ÎîúÎ†àÏù¥ ÌõÑ Î∞îÎ°ú Í≤∞Ï†ú ÏãúÏûë (UI ÏïàÏ†ïÌôîÎ•º ÏúÑÌï¥)
    const timer = setTimeout(() => {
      handleAutoPayment()
    }, 500)

    return () => clearTimeout(timer)
  }, [imagesReady])

  // KS_NET Í≤∞Ï†ú ÏöîÏ≤≠ Î©îÏãúÏßÄ ÏÉùÏÑ±
  const buildPaymentRequest = () => {
    // Ïã§Ï†ú KSCAT ÏÑ§Ï†ï Ï†ïÎ≥¥ ÏÇ¨Ïö©
    const reqMessage = "AP0452IC010200NAT0416478A    000000000000                                                                                                                                                       00000000005000000000000000000000000091000000000913000000000000                                                                                                                                                                                                       X"
    return reqMessage
  }

  const handleAutoPayment = async () => {
    setPaymentStatus('processing')
    setErrorMessage(null)

    try {
      // ‚úÖ Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎäî Ïã§Ï†ú Í≤∞Ï†ú ÎåÄÏã† Í∞ÄÏÉÅ Ï≤òÎ¶¨
      if (process.env.NODE_ENV === 'development') {
        console.log('üíª [DEV] Í∞úÎ∞ú Î™®Îìú: Í∞ÄÏÉÅ Í≤∞Ï†ú ÏÑ±Í≥µ Ï≤òÎ¶¨')
        setPaymentStatus('success')
        setTimeout(() => {
          if (!isNavigating) {
            setIsNavigating(true)
            navigate('/printing', {
              state: {
                uploadedImage: location.state.uploadedImage,
                imageType: location.state.imageType,
                selectedFrame: location.state.selectedFrame,
                paymentCompleted: true,
                paymentResult: { RES: '0000', MSG: 'Í∞ÄÏÉÅ Í≤∞Ï†ú ÏÑ±Í≥µ' },
              },
            })
          }
        }, 2000)
        return // Ïã§Ï†ú Í≤∞Ï†ú Î°úÏßÅ Ïã§Ìñâ Ïïà Ìï®
      }

      console.log('üí≥ KS_NET Í≤∞Ï†ú ÏöîÏ≤≠ ÏãúÏûë...')
      const requestData = { REQ: buildPaymentRequest() }
      console.log('üí≥ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', requestData)

      const electronAPI = window.electronAPI
      if (!electronAPI?.sendPaymentRequest) {
        throw new Error('Electron APIÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.')
      }

      const result = await electronAPI.sendPaymentRequest(requestData)

      console.log('üí≥ Í≤∞Ï†ú ÏùëÎãµ Ï†ÑÏ≤¥:', result)

      if (result?.RES) {
        const responseCode = result.RES
        console.log('üí≥ ÏùëÎãµ ÏΩîÎìú:', responseCode)

        if (responseCode === '0000' || responseCode === '00') {
          console.log('‚úÖ Í≤∞Ï†ú ÏÑ±Í≥µ - ÏùëÎãµÏΩîÎìú:', responseCode)
          setPaymentStatus('success')

          setTimeout(() => {
            if (!isNavigating) {
              setIsNavigating(true)
              navigate('/printing', {
                state: {
                  uploadedImage: location.state.uploadedImage,
                  imageType: location.state.imageType,
                  selectedFrame: location.state.selectedFrame,
                  paymentCompleted: true,
                  paymentResult: result,
                },
              })
            }
          }, 2000)
        } else {
          const errorMsg = result.MSG || `Í≤∞Ï†ú Ïã§Ìå® (ÏΩîÎìú: ${responseCode})`
          console.error('‚ùå Í≤∞Ï†ú Ïã§Ìå® - ÏùëÎãµÏΩîÎìú:', responseCode, 'Î©îÏãúÏßÄ:', errorMsg)
          throw new Error(errorMsg)
        }
      } else if (result?.error) {
        console.error('üí≥ ÌÜµÏã† Ïò§Î•ò:', result.error)
        throw new Error(`ÌÜµÏã† Ïò§Î•ò: ${result.error}`)
      } else {
        console.error('üí≥ ÏòàÏÉÅÏπò Î™ªÌïú ÏùëÎãµ:', result)
        throw new Error('ÏòàÏÉÅÏπò Î™ªÌïú ÏùëÎãµ ÌòïÌÉúÏûÖÎãàÎã§.')
      }
    } catch (error) {
      console.error('‚ùå Í≤∞Ï†ú Ïã§Ìå®:', error)
      setPaymentStatus('failed')
      const errorMsg = error instanceof Error ? error.message : 'Í≤∞Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'
      setErrorMessage(errorMsg)
    }
  }

  // Ïù¥Ï†ÑÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
  const handleGoBack = () => {
    if (isNavigating) return
    setIsNavigating(true)

    // imageTypeÏù¥ 'frame'Ïù¥Î©¥ QR ÌôîÎ©¥ÏúºÎ°ú, 'photo'Î©¥ ÌîÑÎ†àÏûÑ ÏÑ†ÌÉù ÌôîÎ©¥ÏúºÎ°ú
    if (location.state?.imageType === 'frame') {
      navigate('/upload') // ÏôÑÏÑ±Îêú ÌîÑÎ†àÏûÑ ÏÑ†ÌÉùÌïú Í≤ΩÏö∞ QR ÌôîÎ©¥ÏúºÎ°ú
    } else {
      navigate('/frame', { state: location.state }) // ÏÇ¨ÏßÑ ÏóÖÎ°úÎìúÌïú Í≤ΩÏö∞ ÌîÑÎ†àÏûÑ ÏÑ†ÌÉù ÌôîÎ©¥ÏúºÎ°ú
    }
  }

  // Ï≤òÏùåÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
  const handleGoToMain = () => {
    if (isNavigating) return
    setIsNavigating(true)
    navigate('/')
  }

  // Îã§Ïãú ÏãúÎèÑ
  const handleRetry = () => {
    setPaymentStatus('preparing')
    setErrorMessage(null)
  }

  // Ïä§ÌÉÄÏùº Ï†ïÏùò
  const containerStyle: CSSProperties = {
    width: '100%',
    height: '100%',
    position: 'relative',
    overflow: 'hidden',
  }

  const backgroundStyle: CSSProperties = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    backgroundImage: 'url(./payment.png)',
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
    opacity: imagesReady ? 1 : 0,
    transition: imagesReady ? 'opacity 0.3s ease-in-out' : 'none',
  }

  // Î∞òÌà¨Î™Ö Ïò§Î≤ÑÎ†àÏù¥
  const overlayStyle: CSSProperties = {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    backdropFilter: 'blur(2px)',
    zIndex: 1,
  }

  const contentWrapperStyle: CSSProperties = {
    position: 'relative',
    width: '100%',
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 2,
  }

  const paymentBoxStyle: CSSProperties = {
    backgroundImage: 'linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.85) 100%)',
    borderRadius: '32px',
    padding: '80px 60px',
    boxShadow: '0 30px 60px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(255, 255, 255, 0.1)',
    border: '3px solid rgba(245, 158, 11, 0.3)',
    maxWidth: '700px',
    width: '90%',
    textAlign: 'center',
    backdropFilter: 'blur(20px)',
    position: 'relative',
  }

  const amountStyle: CSSProperties = {
    fontSize: '84px',
    fontWeight: 'bold',
    marginBottom: '30px',
    backgroundImage: 'linear-gradient(135deg, #f59e0b, #d97706)',
    WebkitBackgroundClip: 'text',
    backgroundClip: 'text',
    color: 'transparent',
    textShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
    letterSpacing: '-2px',
  }

  const instructionStyle: CSSProperties = {
    fontSize: '36px',
    marginBottom: '50px',
    lineHeight: '1.5',
    color: '#374151',
    fontWeight: '600',
    textShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
  }

  const statusIconStyle: CSSProperties = {
    fontSize: '120px',
    marginBottom: '30px',
    filter: 'drop-shadow(0 8px 16px rgba(0, 0, 0, 0.2))',
  }

  const buttonStyle: CSSProperties = {
    padding: '24px 48px',
    borderRadius: '20px',
    fontSize: '26px',
    fontWeight: 'bold',
    border: 'none',
    minWidth: '220px',
    cursor: 'pointer',
    transition: 'all 0.3s ease',
    margin: '0 20px',
    boxShadow: '0 8px 16px rgba(0, 0, 0, 0.2)',
    position: 'relative',
    overflow: 'hidden',
  }

  const backButtonStyle: CSSProperties = {
    ...buttonStyle,
    backgroundImage: 'linear-gradient(135deg, #f3f4f6, #e5e7eb)',
    color: '#374151',
    border: '2px solid #d1d5db',
  }

  const retryButtonStyle: CSSProperties = {
    ...buttonStyle,
    backgroundImage: 'linear-gradient(135deg, #ef4444, #dc2626)',
    color: 'white',
    border: '2px solid #ef4444',
  }

  const countdownStyle: CSSProperties = {
    fontSize: '28px',
    fontWeight: '600',
    color: '#6b7280',
    marginTop: '20px',
    textShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
  }

  // ÏÉÅÌÉúÎ≥Ñ Î†åÎçîÎßÅ
  const renderPaymentContent = () => {
    switch (paymentStatus) {
      case 'preparing':
        return (
          <>
            <div style={statusIconStyle}>üí≥</div>
            <div style={amountStyle}>‚Ç©{FIXED_AMOUNT.toLocaleString()}</div>
            <div style={instructionStyle}>
              Í≤∞Ï†úÎ•º ÏßÑÌñâÌï©ÎãàÎã§.<br />
              Ïπ¥ÎìúÎ•º Îã®ÎßêÍ∏∞Ïóê ÏÇΩÏûÖÌïòÍ±∞ÎÇò Ï†ëÏ¥âÌï¥ Ï£ºÏÑ∏Ïöî.
            </div>
            <div style={countdownStyle}>
              Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî...
            </div>
            <div style={{ display: 'flex', justifyContent: 'center', gap: '20px', marginTop: '40px' }}>
              <button
                onClick={handleGoBack}
                style={backButtonStyle}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-3px)'
                  e.currentTarget.style.boxShadow = '0 12px 24px rgba(0, 0, 0, 0.25)'
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)'
                  e.currentTarget.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.2)'
                }}
              >
                Ïù¥Ï†ÑÏúºÎ°ú
              </button>
            </div>
          </>
        )

      case 'processing':
        return (
          <>
            <div style={{ ...statusIconStyle, animation: 'spin 2s linear infinite' }}>‚è≥</div>
            <div style={amountStyle}>‚Ç©{FIXED_AMOUNT.toLocaleString()}</div>
            <div style={instructionStyle}>
              Í≤∞Ï†ú ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§...<br />
              Ïπ¥ÎìúÎ•º Îã®ÎßêÍ∏∞ÏóêÏÑú Ï†úÍ±∞ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
            </div>
          </>
        )

      case 'success':
        return (
          <>
            <div style={statusIconStyle}>‚úÖ</div>
            <div style={{ ...amountStyle, backgroundImage: 'linear-gradient(135deg, #10b981, #059669)' }}>
              Í≤∞Ï†ú ÏôÑÎ£å!
            </div>
            <div style={instructionStyle}>
              Í≤∞Ï†úÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.<br />
              Ìè¨ÌÜ†Ïπ¥Îìú Ïù∏ÏáÑÎ•º ÏßÑÌñâÌï©ÎãàÎã§.
            </div>
          </>
        )

      case 'failed':
        return (
          <>
            <div style={statusIconStyle}>‚ùå</div>
            <div style={{ ...amountStyle, backgroundImage: 'linear-gradient(135deg, #ef4444, #dc2626)' }}>
              Í≤∞Ï†ú Ïã§Ìå®
            </div>
            <div style={instructionStyle}>
              {errorMessage || 'Í≤∞Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'}<br />
              Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.
            </div>
            <div style={{ display: 'flex', justifyContent: 'center', gap: '20px', marginTop: '40px' }}>
              <button
                onClick={handleGoToMain}
                style={backButtonStyle}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-3px)'
                  e.currentTarget.style.boxShadow = '0 12px 24px rgba(0, 0, 0, 0.25)'
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)'
                  e.currentTarget.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.2)'
                }}
              >
                Ï≤òÏùåÏúºÎ°ú
              </button>
              <button
                onClick={handleRetry}
                style={retryButtonStyle}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-3px)'
                  e.currentTarget.style.boxShadow = '0 12px 24px rgba(239, 68, 68, 0.4)'
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)'
                  e.currentTarget.style.boxShadow = '0 8px 16px rgba(0, 0, 0, 0.2)'
                }}
              >
                Îã§Ïãú ÏãúÎèÑ
              </button>
            </div>
          </>
        )
    }
  }

  return (
    <div style={containerStyle}>
      {/* Ïï†ÎãàÎ©îÏù¥ÏÖò CSS */}
      <style>
        {`
          @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
          }
          
          @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.9; transform: scale(1.05); }
          }
          
          @keyframes shimmer {
            0% { background-position: -200px 0; }
            100% { background-position: 200px 0; }
          }
          
          .shimmer-effect {
            backgroundImage: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            backgroundSize: 200px 100%;
            animation: shimmer 2s infinite;
          }
        `}
      </style>

      {/* Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ */}
      <div style={backgroundStyle} />
      
      {/* Î∞òÌà¨Î™Ö Ïò§Î≤ÑÎ†àÏù¥ */}
      <div style={overlayStyle} />

      {/* Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ */}
      {!imagesReady && (
        <div
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            backgroundImage: 'linear-gradient(135deg, #fefbf7 0%, #fef3e2 100%)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: '#92400e',
            fontSize: '32px',
            fontWeight: '600',
            zIndex: 1000,
          }}
        >
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '48px', marginBottom: '20px', animation: 'pulse 2s infinite' }}>‚è≥</div>
            ÌôîÎ©¥ Ï§ÄÎπÑ Ï§ë...
          </div>
        </div>
      )}

      {/* Î©îÏù∏ Ïª®ÌÖêÏ∏† */}
      <div style={contentWrapperStyle}>
        <div style={paymentBoxStyle} className="shimmer-effect">
          {/* Ïû•Ïãù ÏöîÏÜå */}
          <div style={{
            position: 'absolute',
            top: '-10px',
            left: '-10px',
            right: '-10px',
            bottom: '-10px',
            backgroundImage: 'linear-gradient(45deg, #f59e0b, #d97706, #f59e0b)',
            borderRadius: '36px',
            zIndex: -1,
            opacity: 0.1,
          }} />
          
          {renderPaymentContent()}
        </div>
      </div>
    </div>
  )
}

export default PaymentScreen